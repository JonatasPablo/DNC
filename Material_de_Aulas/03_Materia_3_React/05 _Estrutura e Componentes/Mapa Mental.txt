                                        Desenvolvimento de um Projeto React
Introdução
Apresentação do projeto que será desenvolvido durante as aulas
Objetivo de reproduzir um ambiente de desenvolvimento real
Requisitos do Projeto
Utilização do Figma para obter o design e os requisitos do projeto
Entendimento do Figma como ferramenta de design para compartilhar protótipos
Style Guide
Definição de cores primárias, secundárias e terciárias
Definição dos tipos de texto a serem utilizados
Formatação de parágrafos, listas e botões
Modelo de formulário de contato
Páginas do Projeto
Home Page
Logo da empresa DLNC
Menu com animação de cor
Componente "hero" para exibir informações importantes
Área de projetos com opção de curtir
Footer com logo, texto, páginas e bandeiras para troca de idioma
Página "Sobre Nós"
Estrutura similar à home page
Componente de banner e de texto personalizado
Página de Projetos
Estrutura similar às páginas anteriores
Lista de projetos com informações e opção de curtir
Página de Contato
Estrutura similar às páginas anteriores
Componente de formulário de contato
Páginas Adicionais
Página de loading
Exemplo de menu mobile com animação
Demonstração do Projeto
Apresentação do projeto final implantado na Vercel
Funcionalidade de troca de idioma entre português e inglês
Envio de mensagem através do formulário de contato
Conclusão
Projeto desenvolvido durante as aulas
Possibilidade de personalização e utilização do projeto como portfólio
Desafios interessantes a serem enfrentados


                                        Criando um CSS Base para um Projeto React
Introdução
Importância de começar um projeto React com o CSS base
Definir cores, padrões de CSS e elementos reutilizáveis
Preparando o Ambiente
Limpar os arquivos padrão do projeto
Renomear o arquivo index.css para main.css
Importando Fontes do Google Fonts
Pesquisar e importar as fontes necessárias
Adicionar as fontes no arquivo main.css
Configurando o CSS Base
Body
Definir margem zero
Definir altura mínima de 100vh
Definir fonte padrão (JOST)
Links
Remover estilos padrão de links
Cores Principais
Definir cores primárias, secundárias e terciárias
Criar classes CSS para reutilização
Grid e Alinhamento
Criar classes para layout em grid
Criar classes para alinhamento de elementos
Media Queries
Definir estilos para telas menores que 768px
Ajustar o container e a direção do flex
Conclusão
Importância de ter um CSS base organizado
Benefícios de reutilizar classes ao longo do projeto
Próxima etapa: configurar as rotas da aplicação


                                        Criação de Rotas no React
O que são Rotas?
Rotas são caminhos diferentes dentro de uma aplicação web
Cada rota tem um código específico associado a ela
Exemplo: google.com/drive vs google.com/mail
Rotas no React
Permitem segregar o conteúdo que o usuário vê
Possibilitam a criação de Single Page Applications (SPAs)
Navegação entre páginas sem recarregar a página
Tudo dentro do mesmo projeto React
Configurando Rotas no React
Instalar o pacote react-router-dom
Importar os elementos necessários no arquivo App.js:
BrowserRouter, Router, Route, Routes
Criar as rotas dentro do componente App:
Definir o path de cada rota
Associar um element (componente) a cada rota
Utilizar o componente Link para navegar entre as rotas
Evita recarregamento da página
Mantém a experiência de SPA
Benefícios das Rotas no React
Segregação de conteúdo por página
Navegação fluida entre páginas
Melhoria na experiência do usuário
Tudo dentro do mesmo projeto React


                                        Criando Páginas com React
Estruturando Páginas no React
Páginas são grandes componentes que contêm componentes menores
Podem ser chamadas de "views" ou "layouts" em alguns projetos
Não existe uma forma certa ou errada de organizar as páginas
Aqui usaremos a nomenclatura "pages"
Criando Páginas
Home
Componente funcional com estrutura básica
Renderiza um título e um subtítulo
About
Componente similar à página Home
Contém título e subtítulo diferentes
Contact
Componente similar às páginas anteriores
Título e subtítulo específicos para a página de contato
Projects
Última página criada
Também possui título e subtítulo próprios
Importando Páginas no App.jsx
Importação das páginas é feita de forma organizada, separada por comentários
Cada página é importada e substituída no elemento da rota correspondente
Importante exportar os componentes de página para que possam ser importados
Próximos Passos
Agora que temos a estrutura de páginas, podemos começar a criar os componentes que serão inseridos em cada página
O próximo passo será criar o componente de cabeçalho (header) para ser utilizado nas páginas


                                        Criação de Componentes de Cabeçalho (Header) em React
Tópicos Abordados:
1. Estrutura de Pastas e Arquivos
Criar pasta "components" dentro de "src"
Criar pasta "header" dentro de "components"
Criar arquivos "header.jsx" e "header.css" dentro da pasta "header"
2. Separação de Lógica CSS e JSX
Benefícios de manter a lógica CSS separada do JSX
Facilita manutenção e atualização do código
3. Criação do Componente de Cabeçalho
Função "header" para encapsular o conteúdo do cabeçalho
Utilização de tags HTML como <header> dentro do JSX
Uso da propriedade "className" para aplicar estilos CSS
4. Importação de Imagens
Importar o logotipo da DNC como um arquivo SVG
Armazenar o logotipo na pasta "assets"
Utilizar o logotipo importado dentro do componente de cabeçalho
5. Navegação com React Router
Utilizar o componente <Link> do React Router para criar links entre páginas
Vincular o logotipo à página inicial (homepage)
6. Criação do Menu de Navegação
Adicionar um componente de navegação (<nav>) dentro do cabeçalho
Criar uma lista não ordenada (<ul>) com links para as diferentes páginas
Aplicar estilos CSS à lista e aos links
7. Estilização do Cabeçalho
Definir estilos para o cabeçalho, como cor de fundo, padding e alinhamento
Remover estilos padrão da lista de links (list-style, margin, padding)
Aplicar estilos personalizados aos links, incluindo hover
8. Importação do Arquivo CSS
Importar o arquivo "header.css" no componente de cabeçalho
Garantir que os estilos sejam aplicados corretamente
9. Considerações Finais
O componente de cabeçalho está pronto para ser utilizado em todas as páginas da aplicação
O próximo passo será criar o componente de rodapé (footer)
Menciona que o componente de menu mobile será abordado em uma aula futura, durante o bloco de Hooks
Em resumo, o vídeo abordou a criação de um componente de cabeçalho reutilizável em uma aplicação React, incluindo a estruturação de pastas e arquivos, a separação de lógica CSS e JSX, a importação de imagens, a integração com o React Router e a estilização do componente.


                                        Criação do Componente de Footer
Estruturação do Footer
Análise do layout no Figma
Logo da DNC
Páginas
Informações de contato
Copyright
Bandeiras (Brasil e EUA)
Importação dos ícones (SVG) para a pasta de assets
Facebook, Instagram, LinkedIn, Twitter
Implementação do Componente de Footer
Criação do arquivo Footer.jsx
Estrutura similar ao componente de Header
Criação do arquivo footer.css
Importação dos ícones dos assets
Brasil Icon, USA Icon, Facebook Icon, LinkedIn Icon, Instagram Icon, Twitter Icon
Estruturação do conteúdo do footer
Div com classe deflex para organização dos elementos
Inserção do logo da DNC
Div com classe footer-logo-col para os elementos à esquerda
Texto com cor cinza personalizada
Div com classe social-links para os ícones de redes sociais
Links externos com target="_blank"
Renderização do Footer
Importação do componente de Footer na página Home
Visualização do footer na aplicação
Próximos Passos
Continuação da implementação do componente de Footer
Ajustes de estilos e layout


                                        Criação do Componente de Footer
Configuração do CSS do Footer
Criação de classes para elementos do footer
footer, logo, traço call, edit
footer call, margin, max edit, edit
footer call ul, text align center, margin, padding
footer call li, margin
footer .h3, font-size, margin
footer .logo, font-size
footer .p, font-size, margin, line-height
footer .a, text-decoration, footer hover color
footer .SocialLinks a, margin
footer copy, margin
footer copy .langs area, column gap
Adição de media queries para responsividade
maxWidth 768px
footer call, margin, maxWidth, width
footer logo call, maxWidth, width
Estruturação do HTML do Footer
social links
footer call
h3 com "pages"
Lista de links usando router link
footer logo call
Parte inferior do footer
footer copy
Texto de copyright
langs area
Bandeiras do Brasil e EUA
Adição de coluna com informações de contato
h3 com "contact"
Endereço, e-mail e telefone
Ajustes Finais
Correção de alinhamento dos elementos
Aplicação da fonte correta (DM Serif Display) nos títulos
Ajuste da cor do link do footer
O objetivo principal deste vídeo é a criação do componente de footer para uma aplicação web, incluindo a configuração do CSS, a estruturação do HTML e os ajustes finais para que o resultado final fique de acordo com o design proposto no Figma.


                                        Criação de Componentes Compartilhados no React
Componente de Botão
Conceito de Props
Props são propriedades que são passadas para um componente
Permitem que um componente receba informações externas e as utilize para renderizar seu conteúdo
Tipos de Botões
Botão Primário
Cor de fundo: #0CC
Cor do texto: white
Hover: #0056B3
Botão Secundário
Cor de fundo: #1D1D1D
Cor do texto: white
Hover: #4D4D4D
Botão Outline
Borda: 2px solid #0CC
Cor do texto: #0CC
Hover:
Cor de fundo: #0CC
Cor do texto: white
Botão Desabilitado
Cor de fundo: #666
Cor do texto: #CCC
Cursor: not-allowed
Hover: Nenhum efeito
Implementação
Criar o componente Button.jsx e Button.css
Definir as props do componente:
arrow: Renderiza uma seta no botão
buttonStyle: Define o estilo do botão (primary, secondary, outline, disabled)
loading: Indica se o botão está em estado de carregamento
children: Conteúdo a ser exibido no botão
Utilizar condicional para renderizar o estilo do botão com base na prop buttonStyle
Adicionar a prop disabled para o botão desabilitado
Importar e utilizar o componente Button na página Home
Próximos Passos
Criar o componente de banner na próxima aula


                                        Criação de Componentes Compartilhados
Componente de Banner
Criação do componente de banner
Estrutura do componente
Arquivo .jsx e .css
Definição de classes no CSS
banner
background-position: center
background-size: cover
height: 356px
width: 100%
titlePanel
background-color: white
border-radius
font-size: 50px
height: 150px
margin: 0 auto
max-width: 500px
Uso de style inline para definir a imagem de fundo
backgroundImage: url(props.image)
Componente interno titlePanel
Exibe o título (props.title)
Utiliza classes definidas no CSS
Uso do componente de banner na página inicial
Passagem de props (title)
Exibição do componente com fundo cinza enquanto a imagem não é carregada
Importação de Imagens
Diferença entre public e assets
public: imagens acessíveis via URL
assets: imagens locais, não expostas
Importação das imagens do Figma
Exportação das imagens do Figma
Adição das imagens no diretório public
Uso das imagens no componente de banner
Chamada das imagens via about.jpg, contact.jpg, etc.
Próximos Passos
Adição de mais componentes compartilhados na próxima aula


                                        Criação de um Componente Compartilhado de Hero
Contexto
Componentes compartilhados na aplicação
Necessidade de criar um componente de Hero para a homepage
Criação do Componente de Hero
Exportar a imagem do Figma
Salvar a imagem na pasta public
Criar a estrutura do componente
Pasta components/Hero
Arquivos hero.jsx e hero.css
Utilizar a estrutura do componente Banner existente
Renomear para Hero
Criar uma classe Hero com alignCenter
Conteúdo do Componente de Hero
Remover a tag container
Criar a classe hero.text
Adicionar um h1 e um p com os textos do Figma
Utilizar o componente Button compartilhado
Passar as props secondary e arrow
Envolver o botão com o componente Link para a página About
Estilização do Componente de Hero
Definir o background-image usando a imagem importada
Centralizar e cobrir a imagem
Adicionar border-radius e height
Estilizar o h1 e o hero.text
Adicionar media queries para responsividade
Aumentar o tamanho do hero.text em telas de tablet
Diminuir o tamanho do h1 em telas de celular
Integração do Componente de Hero
Chamar o componente no Header
Colocar dentro do container para alinhamento
Adicionar box-sizing: border-box no container para responsividade
Próximo Passo
Criar o componente compartilhado de ProjectList


                                        Criação de um Componente de Lista de Projetos
Contexto
Adição de um novo componente compartilhado para a aplicação: o componente de Lista de Projetos
As imagens dos projetos virão de uma API futuramente
Criação do Componente
Exportação dos ícones de "like" e "like preenchido" como SVG
Criação do componente ProjectsList dentro da pasta components
Arquivo projects-list.jsx para a lógica
Arquivo projects-list.css para os estilos
Estrutura do Componente
Seção de "hero" com título e subtítulo
Grid de cards de projetos
Thumbnail (inicialmente com um background cinza)
Nome do projeto
Localização (placeholder)
Ícone de "like" (com funcionalidade ainda não implementada)
Estilização
Aplicação de estilos na seção de "hero"
Margem, alinhamento e tamanho máximo
Estilização do título e subtítulo
Criação do grid de projetos
Definição do display grid com 4 colunas
Espaçamento entre os cards
Estilização dos cards individuais
Thumbnail (posicionamento e tamanho)
Título e texto (tamanho da fonte e margem)
Adição de media queries para responsividade
Grid com 2 colunas em telas de tablet
Grid com 1 coluna em telas de celular
Integração na Página Inicial
Importação e adição do componente ProjectsList na página inicial
Visualização do componente na aplicação
Próximos Passos
Implementação da lógica de exibição dos projetos vindo da API
Adição de funcionalidades de interação, como o botão de "like"


                                        Desenvolvimento de uma Página Web Responsiva
Configuração da Homepage
Verificação da responsividade dos componentes
Hero e Project List já estão responsivos
Footer não está responsivo
Adição de responsividade ao footer
Uso da classe MobileFDColumn para quebrar o footer em linhas
Criação da Página de Projetos
Não é necessário reescrever todo o código
Cópia e colagem dos componentes da homepage
Banner
Header e Footer
Project List
Ajuste do banner
Alteração do título para "Projects"
Uso da imagem project.jpg
Posicionamento do banner fora do container, como no header
Resultado Final
Páginas de homepage e projetos configuradas
Próximos passos: adição de mais funcionalidades às outras páginas
O foco principal deste conteúdo é o desenvolvimento de uma página web responsiva, com ênfase na configuração da homepage e da página de projetos. As principais etapas abordadas são:
Verificação e adição de responsividade aos componentes da homepage, com destaque para o footer.
Reaproveitamento de código da homepage para a criação da página de projetos, com a cópia e colagem de componentes.
Ajuste do banner na página de projetos, alterando o título e a imagem de fundo.
Posicionamento do banner fora do container, seguindo o padrão do header.
Conclusão com a configuração das duas páginas e a indicação de próximos passos para adicionar mais funcionalidades.
O conteúdo demonstra a importância da responsividade e do reaproveitamento de código no desenvolvimento web, além de abordar técnicas práticas para a construção de uma interface de usuário coerente e eficiente.


                                        Construção de um Site com React
Tópicos Abordados
1. Criação da Página "About"
Adição dos componentes básicos (Header, Footer, Banner)
Criação do componente "AboutText"
Estrutura do componente (TextSection, TextSectionText)
Estilização do componente (ColumnGap, Margin, MediaQuery)
Inserção do componente na página "About"
2. Criação da Página "Contato"
Adição dos componentes básicos (Header, Footer, Banner)
Criação do componente "ContactForm"
Estrutura do componente (Form, H2)
Estilização do componente (Margin, MaxWidth, TextAlign)
Inserção do componente na página "Contato"
3. Considerações Finais
Visão geral do progresso do site
Incentivo ao autor para continuar o desenvolvimento
Preparação para a próxima etapa, onde serão adicionadas mais funcionalidades
Detalhamento dos Tópicos
1. Criação da Página "About"
Nesta seção, o instrutor guia o aluno na adição dos componentes básicos (Header, Footer, Banner) à página "About". Em seguida, ele explica a criação de um novo componente chamado "AboutText", que será responsável por exibir o conteúdo textual da página.
O componente "AboutText" é estruturado com duas seções de texto (TextSection), cada uma contendo um título (H2) e parágrafos (P). Para diferenciar a primeira seção, é aplicada uma classe "primary-color" ao primeiro parágrafo. O instrutor também adiciona uma MediaQuery para ajustar o layout em telas menores (tablets).
Após a criação do componente, o instrutor o insere na página "About", finalizando a estruturação dessa página.
2. Criação da Página "Contato"
Nesta seção, o instrutor segue um processo similar ao da página "About", adicionando os componentes básicos (Header, Footer, Banner) à página "Contato". Em seguida, ele cria um novo componente chamado "ContactForm", que será responsável por exibir o formulário de contato.
O componente "ContactForm" possui uma estrutura simples, com um título (H2) e um elemento "form" (ainda sem funcionalidade). O instrutor aplica estilos para centralizar e posicionar o componente na página.
Assim como nas páginas anteriores, o instrutor insere o componente "ContactForm" na página "Contato", concluindo a estruturação dessa página.
3. Considerações Finais
Nesta seção, o instrutor faz uma avaliação geral do progresso do site, destacando que a estrutura básica das páginas já está pronta. Ele incentiva o aluno a continuar o desenvolvimento, adicionando mais funcionalidades e interatividade ao site.
O instrutor também menciona que a implementação completa do formulário de contato será abordada em aulas posteriores, pois envolve lógicas mais complexas que não serão tratadas neste momento.
Ao final, o instrutor encoraja o aluno a apreciar o trabalho realizado até o momento e a se preparar para a próxima etapa do desenvolvimento do site.


