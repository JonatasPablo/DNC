// =========================================================
// üîπ FUN√á√ÉO ASS√çNCRONA PARA BUSCAR DADOS DA API üîπ
// =========================================================

/**
 * Esta fun√ß√£o chama uma API externa de forma ass√≠ncrona.
 * Ela √© usada para buscar dados a partir de um `endpoint` espec√≠fico.
 *
 * - `endpoint`: Indica o recurso que voc√™ deseja acessar (exemplo: "projects").
 * - `params`: Par√¢metros adicionais que poderiam ser enviados na requisi√ß√£o (opcional neste exemplo).
 *
 * A fun√ß√£o retorna os dados em formato JSON, que √© o tipo de dado mais comum em APIs REST.
 */

// ‚úÖ Exportamos a fun√ß√£o com `export const` para poder utiliz√°-la em outros arquivos do projeto.
export const getApiData = async (endpoint, params) => {
    // =========================================================
    // üî∏ BLOCO TRY/CATCH PARA TRATAR ERROS üî∏
    // =========================================================
    /**
     * O `try` tenta executar o c√≥digo normalmente.
     * Se acontecer algum erro (exemplo: conex√£o perdida), o `catch` captura e trata esse erro.
     */
    try {

        // =========================================================
        // üîπ CRIA√á√ÉO DA URL DA API üîπ
        // =========================================================
        /**
         * A URL √© o endere√ßo de onde os dados ser√£o buscados.
         * Estamos concatenando o `endpoint` para acessar diferentes recursos.
         * Exemplo de URL gerada: https://dnc-react-api.vercel.app/files/projects
         */
        const url = new URL(`https://dnc-react-api.vercel.app/files/${endpoint}`);

        // =========================================================
        // üîπ ENVIO DA REQUISI√á√ÉO PARA A API üîπ
        // =========================================================
        /**
         * A fun√ß√£o `fetch()` √© nativa do JavaScript e faz a comunica√ß√£o com a API.
         * - Primeiro argumento: a URL do recurso.
         * - Segundo argumento: um objeto de configura√ß√£o para definir o m√©todo da requisi√ß√£o.
         * Neste caso, estamos fazendo uma requisi√ß√£o do tipo `GET` para obter informa√ß√µes.
         */
        const response = await fetch(url, {
            method: 'GET' // Informa que √© uma requisi√ß√£o GET, utilizada para obter dados (n√£o enviar).
        });

        // =========================================================
        // üîπ VERIFICA SE A REQUISI√á√ÉO FOI BEM-SUCEDIDA üîπ
        // =========================================================
        /**
         * O `response.ok` retorna `true` se o status da resposta estiver no intervalo 200-299.
         * Se n√£o estiver, significa que ocorreu um erro (exemplo: 404 Not Found ou 500 Internal Server Error).
         */
        if (!response.ok) {
            // Exibe um erro no console informando o status da falha.
            console.error(`Error: ${response.status}`);
            // ‚ö†Ô∏è Aqui poderia ser lan√ßado um erro para interromper a execu√ß√£o caso necess√°rio:
            // throw new Error(`HTTP error! status: ${response.status}`);
        }

        // =========================================================
        // üîπ CONVERS√ÉO DOS DADOS PARA JSON üîπ
        // =========================================================
        /**
         * A resposta da API geralmente vem em formato JSON.
         * Precisamos converter o `response` para JSON usando `.json()`.
         * O resultado √© um objeto JavaScript que podemos manipular.
         */
        const data = await response.json();

        // =========================================================
        // üîπ RETORNO DOS DADOS üîπ
        // =========================================================
        /**
         * Retornamos o `data` para quem chamou esta fun√ß√£o.
         * Quem chamou a fun√ß√£o pode ent√£o manipular esses dados (exibir na tela, por exemplo).
         */
        return data;

    } catch (e) {
        // =========================================================
        // üîπ TRATAMENTO DE ERROS üîπ
        // =========================================================
        /**
         * O bloco `catch` √© acionado quando acontece um erro dentro do `try`.
         * Exemplos de erros que podem ocorrer:
         * - Falta de conex√£o com a internet.
         * - URL inv√°lida.
         * - Problemas de CORS (Cross-Origin Resource Sharing).
         * 
         * Neste caso, estamos apenas exibindo o erro no console.
         * Em um projeto real, voc√™ poderia:
         * - Exibir uma mensagem de erro amig√°vel para o usu√°rio.
         * - Tentar refazer a requisi√ß√£o automaticamente.
         */
        console.error('Catch error: ', e);
    }
};
