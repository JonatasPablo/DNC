// ========================================================================================
// ‚úÖ IMPORTA√á√ïES INICIAIS
// ========================================================================================

/**
 * üîπ Importa o arquivo de estilos CSS espec√≠fico para o componente `Button`.
 *   - Ele define a apar√™ncia visual do bot√£o (cores, tamanhos, hover, disabled, etc).
 *   - Mantemos a separa√ß√£o da l√≥gica (JSX) e a apar√™ncia (CSS) por boas pr√°ticas.
 */
import './Button.css';

/**
 * üîπ Importa uma imagem SVG (√≠cone de seta branca) localizada na pasta de assets.
 *   - Ser√° usada de forma opcional no bot√£o, como um indicador visual de "avan√ßo" ou "a√ß√£o".
 */
import WhiteArrow from '../../assets/white-arrow.svg';

// ========================================================================================
// ‚úÖ DEFINI√á√ÉO DO COMPONENTE REUTILIZ√ÅVEL BUTTON
// ========================================================================================

/**
 * Criamos um componente de bot√£o funcional chamado `Button`.
 * Ele √© reutiliz√°vel e personaliz√°vel, aceitando v√°rias propriedades (props).
 *
 * Props s√£o par√¢metros passados para o componente que controlam seu comportamento e visual.
 *
 * ‚öôÔ∏è Par√¢metros recebidos (desestruturados diretamente no argumento da fun√ß√£o):
 * @param {boolean} arrow - Define se deve exibir o √≠cone de seta ao lado do conte√∫do do bot√£o.
 * @param {string} buttonStyle - Define estilos adicionais do bot√£o, controlando o layout (ex: primary, secondary, outline).
 * @param {boolean} loading - Indica um estado de carregamento. (‚ö†Ô∏è N√£o foi implementado no JSX, mas pode ser √∫til futuramente!)
 * @param {ReactNode} children - √â o conte√∫do do bot√£o. Geralmente um texto ("Clique aqui"), mas pode ser qualquer elemento JSX.
 * @param {object} props - Outras propriedades nativas do elemento <button> (exemplo: onClick, disabled, type...).
 */
function Button({ arrow, buttonStyle, loading, children, ...props }) {

    // ========================================================================================
    // ‚úÖ RETORNO DO JSX - ESTRUTURA VISUAL DO BOT√ÉO
    // ========================================================================================
    
    /**
     * JSX significa JavaScript XML. √â uma forma de escrever a estrutura visual de um componente
     * (parecido com HTML, mas dentro do JavaScript).
     *
     * O JSX deve sempre retornar um √∫nico n√≥ raiz. Aqui, usamos a tag `<button>`.
     */
    return (
        /**
         * ‚úÖ `<button>` √© o bot√£o nativo do HTML.
         * - Ele √© sem√¢ntico e tem suporte para acessibilidade, navega√ß√£o com teclado, entre outros.
         * - A `className` define as classes CSS aplicadas. Concatenamos a classe base `button` com a varia√ß√£o passada pela prop `buttonStyle`.
         * - O operador `...props` insere todas as propriedades extras que forem passadas para o componente, como:
         *    - onClick
         *    - type="submit"
         *    - disabled
         *    - aria-label (para acessibilidade)
         */
        <button className={`button ${buttonStyle}`} {...props}>

            {/**
             * ‚úÖ {children}
             * - O conte√∫do do bot√£o (normalmente texto).
             * - O `children` √© a parte do conte√∫do entre a abertura e o fechamento da tag no JSX:
             *     <Button>CLIQUE AQUI</Button>
             * - √â o que torna esse componente flex√≠vel e reutiliz√°vel.
             */}
            {children}

            {/**
             * ‚úÖ {arrow && ...}
             * - Renderiza a imagem `WhiteArrow` somente se a prop `arrow` for true.
             * - O `&&` √© uma forma curta de dizer: "Se `arrow` for verdadeiro, exiba o √≠cone".
             * - O `alt` ajuda na acessibilidade (a11y) descrevendo a imagem.
             */}
            {arrow && <img src={WhiteArrow} alt="Seta branca" />}
        </button>
    );
}

// ========================================================================================
// ‚úÖ EXPORTA√á√ÉO DO COMPONENTE BUTTON
// ========================================================================================

/**
 * ‚úÖ `export default Button`
 * - Permite que outros arquivos importem e usem esse componente.
 * - Exemplo de uso:
 *     import Button from './components/Button/Button';
 *     <Button buttonStyle="primary">Clique aqui</Button>
 */
export default Button;
