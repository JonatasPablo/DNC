// ============================================================================================
// ‚úÖ IMPORTA√á√ÉO DE ESTILOS (CSS) PARA O COMPONENTE `Banner`
// ============================================================================================

/**
 * ‚û°Ô∏è O comando `import` √© usado em JavaScript para carregar arquivos, bibliotecas ou outros m√≥dulos.
 * 
 * üîπ Aqui, estamos importando o arquivo de estilos `Banner.css` para definir a apar√™ncia visual do componente `Banner`.
 * üîπ O CSS pode definir:
 *    - Altura e largura do banner
 *    - Bordas arredondadas ou n√£o
 *    - Estiliza√ß√£o do t√≠tulo
 *    - Imagem de fundo, cores e responsividade
 * 
 * ‚úÖ Boas pr√°ticas:
 * - Manter o CSS do componente separado ajuda na organiza√ß√£o e reusabilidade.
 * - Nomear o arquivo CSS com o nome do componente facilita a identifica√ß√£o do seu estilo.
 */
import './Banner.css';


// ============================================================================================
// ‚úÖ DEFINI√á√ÉO DO COMPONENTE FUNCIONAL `Banner`
// ============================================================================================

/**
 * ‚û°Ô∏è O React permite criar componentes funcionais de forma simples.
 * üîπ Um componente funcional em React √© basicamente uma fun√ß√£o JavaScript que retorna JSX.
 * 
 * ‚úÖ O que s√£o props?
 * - `props` (propriedades) s√£o par√¢metros que um componente recebe, permitindo customiza√ß√£o.
 * - Isso torna o componente **reutiliz√°vel** e **din√¢mico**.
 * 
 * ‚úÖ Por que usar props?
 * - Ao inv√©s de criar v√°rios banners est√°ticos, voc√™ cria **um componente gen√©rico** que pode mudar:
 *   Exemplo: 
 *   <Banner title="About Us" image="About.jpg" />
 */
function Banner(props) {

    // ========================================================================================
    // ‚úÖ RETORNO DO JSX DO COMPONENTE BANNER
    // ========================================================================================

    /**
     * ‚û°Ô∏è JSX √© uma extens√£o de sintaxe para JavaScript que permite escrever estruturas parecidas com HTML dentro do React.
     * ‚û°Ô∏è Tudo o que est√° dentro de `return()` ser√° renderizado na tela pelo React.
     */
    return (

        // ====================================================================================
        // ‚úÖ CONTAINER PRINCIPAL DO BANNER
        // ====================================================================================

        /**
         * ‚û°Ô∏è Aqui criamos a `div` principal do banner.
         * 
         * üîπ A `className` (equivalente ao atributo `class` do HTML) aplica as regras do CSS importado.
         * üîπ `d-flex` e `al-end` s√£o classes utilit√°rias para facilitar o uso de `display: flex` e alinhamento dos elementos.
         * 
         * ‚úÖ O atributo `style` define o estilo inline de CSS. Estamos utilizando-o para definir a imagem de fundo dinamicamente.
         * ‚úÖ Por qu√™? Porque a imagem do banner muda de acordo com a prop recebida.
         * 
         * Exemplo: Se `props.image = "About.jpg"`, a propriedade `backgroundImage` ser√°:
         * `url(/About.jpg)`
         * 
         * ‚úÖ Dicas de boas pr√°ticas:
         * - Sempre valide o valor de `props.image` para evitar erros.
         * - Caso queira passar URLs completas, adapte a sintaxe.
         */
        <div 
            className='banner d-flex al-end'           // Classes CSS que definem o layout e alinhamento.
            style={{
                backgroundImage: `url(/${props.image})`, // Define a imagem de fundo dinamicamente com base na prop recebida.
                backgroundSize: 'cover',                 // Garante que a imagem cubra toda a √°rea do banner.
                backgroundPosition: 'center'             // Centraliza a imagem dentro do container.
            }}
        >

            {/* ==================================================================================== */}
            {/* ‚úÖ CONTAINER CENTRALIZADOR DO CONTE√öDO DENTRO DO BANNER                             */}
            {/* ==================================================================================== */}

            {/**
             * ‚û°Ô∏è A `div` com a classe `container` geralmente define uma largura m√°xima para o conte√∫do.
             * ‚úÖ Por que isso √© importante?
             * - Em resolu√ß√µes muito grandes, evita que o conte√∫do fique "espalhado".
             * - Ajuda a centralizar o conte√∫do e a manter um layout mais agrad√°vel visualmente.
             */}
            <div className='container'>

                {/* ==================================================================================== */}
                {/* ‚úÖ √ÅREA ONDE FICA O T√çTULO DO BANNER                                              */}
                {/* ==================================================================================== */}

                {/**
                 * ‚û°Ô∏è Este container centraliza o conte√∫do do t√≠tulo no banner.
                 * üîπ `d-flex` ‚Üí Ativa o Flexbox para manipular o alinhamento.
                 * üîπ `al-center` ‚Üí Centraliza verticalmente (align-items: center).
                 * üîπ `jc-center` ‚Üí Centraliza horizontalmente (justify-content: center).
                 */}
                <div className='title-panel d-flex al-center jc-center'>

                    {/* ==================================================================================== */}
                    {/* ‚úÖ T√çTULO H1 DO BANNER                                                           */}
                    {/* ==================================================================================== */}

                    {/**
                     * ‚û°Ô∏è O elemento <h1> define o t√≠tulo principal de uma se√ß√£o ou p√°gina.
                     * 
                     * ‚úÖ SEO (Search Engine Optimization):
                     * - O <h1> √© o t√≠tulo mais importante para SEO.
                     * - Deve ser √∫nico na p√°gina ou pelo menos sem√¢ntico (em banners informativos, pode-se usar <h2> ou <p>).
                     * 
                     * ‚úÖ Acessibilidade (a11y):
                     * - Um <h1> ajuda leitores de tela a entenderem a estrutura do conte√∫do.
                     * 
                     * ‚úÖ Exemplo:
                     * Se passarmos no componente:
                     * <Banner title="About Us" image="About.jpg" />
                     * O conte√∫do dentro do <h1> ser√° "About Us".
                     */}

                    <h1>{props.title}</h1>
                </div>

            </div>
        </div>
    );
}

// ============================================================================================
// ‚úÖ EXPORTA√á√ÉO DO COMPONENTE `Banner`
// ============================================================================================

{/**
 * ‚û°Ô∏è `export default` torna o componente acess√≠vel para ser usado em outros lugares da aplica√ß√£o.
 * 
 * Exemplo de uso:
 * import Banner from './components/Banner/Banner';
 * 
 * E depois em algum JSX:
 * <Banner title="About Us" image="About.jpg" />
 * 
 * ‚úÖ Boas pr√°ticas:
 * - Nomear componentes com letras mai√∫sculas (Banner).
 * - Usar `export default` facilita a importa√ß√£o sem precisar de chaves { }.
 */}
export default Banner;
