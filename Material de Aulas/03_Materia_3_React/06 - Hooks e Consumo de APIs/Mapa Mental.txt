                                        Ciclo de Vida de Aplicações React e Hooks
Ciclo de Vida de Aplicações React
Montagem (Mounting): Quando um componente é criado e inserido no DOM.
Atualização (Updating): Quando um componente é re-renderizado devido a mudanças em props ou estado.
Desmontagem (Unmounting): Quando um componente é removido do DOM.
Gerenciamento de Estado
Estado Inicial (Initial State): O estado inicial de um componente.
Atualização de Estado: Quando o estado de um componente é atualizado, a tela é re-renderizada com as novas informações.
Hooks
Objetivo: Fornecer uma maneira mais simples e intuitiva de gerenciar o ciclo de vida e o estado de componentes React.
Exemplos:
useState: Permite gerenciar o estado de um componente.
useEffect: Permite executar efeitos colaterais em um componente.
useContext: Permite acessar o contexto de um componente.
Comparação Antes e Depois dos Hooks
Antes dos Hooks:
Código mais verboso para gerenciar o ciclo de vida.
Separação entre métodos de ciclo de vida (mount, update, etc.).
Depois dos Hooks:
Código mais conciso e legível.
Hooks permitem uma abordagem mais declarativa e reativa.
Conclusão
Os Hooks simplificam significativamente o desenvolvimento de aplicações React, tornando o código mais legível e fácil de manter.
Eles permitem uma abordagem mais declarativa e reativa, facilitando o gerenciamento do ciclo de vida e do estado dos componentes.


                                        Usando o hook useState no React
Introdução
Entender o que são hooks, ciclos de vida e estado
Usar o hook useState pela primeira vez na aplicação
Desafio
Criar um componente de menu mobile
Usar o useState para controlar a abertura e fechamento do menu
Implementação
Estilizar o menu mobile usando CSS
Adicionar responsividade com media queries
Criar classes para controlar a abertura e fechamento do menu
Adicionar efeitos visuais como overlay e animações
Implementar a lógica do menu mobile usando useState
Importar o useState do React
Criar o estado isOpen e a função setIsOpen
Usar o estado isOpen para controlar a exibição do menu
Adicionar o botão de menu mobile
Criar um componente de botão
Chamar o botão no header e aplicar a classe mobile-menu
Usar o onClick do botão para chamar a função setIsOpen e alternar o estado
Adicionar o botão de fechar o menu mobile
Criar uma função toggleMenu para encapsular a lógica de abertura e fechamento
Adicionar o botão de fechar com a classe close-btn
Chamar a função toggleMenu no onClick do botão de fechar
Conclusão
O menu mobile está funcionando corretamente, com a possibilidade de abrir e fechar
Aprendemos a usar o hook useState para gerenciar o estado do componente
Organizamos a lógica em funções para facilitar a manutenção do código


                                        Usando o UseEffect no React
Introdução
O UseEffect é um hook muito importante no desenvolvimento de aplicações React
Ele permite controlar o ciclo de vida dos componentes, desde a montagem até a desmontagem
Problema Identificado
Quando o usuário navega entre as páginas da aplicação, a posição da página não é atualizada corretamente
Isso ocorre porque o React Router mantém a mesma página carregada, apenas atualizando o conteúdo
Isso pode gerar uma experiência ruim para o usuário, que pode ficar "perdido" na página
Solução com UseEffect
Criamos uma função utilitária scrollToTop que rola a página para o topo sempre que a rota é alterada
Essa função é implementada usando o hook useEffect, que é chamado sempre que a rota muda
Dentro do useEffect, usamos o window.scroll para rolar a página para o topo (0, 0)
Passamos o pathName como dependência do useEffect para garantir que ele seja chamado apenas quando a rota mudar
Implementação Prática
Criamos uma pasta utils no projeto para armazenar funções utilitárias
Dentro dessa pasta, criamos o arquivo scrollToTop.jsx com a função scrollToTop
No arquivo App.js, importamos e adicionamos o scrollToTop antes das rotas
Dessa forma, sempre que o usuário navegar entre as páginas, a página será rolada para o topo
Conclusão
O useEffect é um hook fundamental no desenvolvimento de aplicações React
Ele permite controlar o ciclo de vida dos componentes e realizar efeitos colaterais
Neste exemplo, usamos o useEffect para resolver um problema de experiência do usuário na navegação da aplicação
É importante estar sempre atualizado sobre os hooks e suas atualizações, pois eles são a base do desenvolvimento em React


                                        Consumindo APIs REST
Objetivo do Bloco
Entender como trazer dados de um banco de dados ou servidor para um projeto front-end em React
Conceitos sobre a Internet
Toda a internet é baseada no protocolo HTTP (Hyper Text Transfer Protocol)
HTTP é um protocolo de transferência de arquivos
A internet é uma rede de conexões ponto-a-ponto, onde transferimos dados de um lugar para outro
Inicialmente, a internet era apenas HTML puro, mas depois começou a incluir dados de servidores
Instituições que Gerenciam a Internet
W3C (World Wide Web Consortium) é a instituição que cria as regras e métodos para as conexões na internet
Métodos de Requisição HTTP
POST (Create)
Usado para criar algo no servidor
Exemplo: Comentar uma foto no Instagram
GET (Read)
Usado para buscar dados do servidor
Exemplo: Ler os comentários de uma foto no Instagram
PUT (Update)
Usado para atualizar algo no servidor
Exemplo: Editar um comentário no Facebook
DELETE
Usado para excluir algo no servidor
Exemplo: Deletar um comentário no WhatsApp
CRUD
Sigla que representa os 4 métodos HTTP principais: Create, Read, Update, Delete
Documentação
Recomendação de consultar a documentação do Mozilla e da W3C para entender melhor os métodos HTTP
Respostas dos Métodos HTTP
Cada método HTTP gera uma resposta na aplicação
É importante entender essas respostas para lidar com elas adequadamente


                                        Códigos de Status HTTP
Introdução
Conexão entre aplicação web e servidores, bancos de dados
Regida pelos métodos HTTP
Necessidade de entender o que acontece na conexão (sucesso ou erro)
Códigos de status HTTP fornecem essa informação
Tipos de Códigos de Status
Respostas Informativas (100-199)
Informam algo, não necessariamente sucesso ou erro
Ex: 100 Continue, 101 Switching Protocols
Respostas de Sucesso (200-299)
Indicam que a requisição foi bem-sucedida
Ex: 200 OK, 201 Created, 202 Accepted, 204 No Content
Respostas de Redirecionamento (300-399)
Indicam que a requisição precisa ser redirecionada
Ex: 301 Moved Permanently, 302 Found, 304 Not Modified
Erros de Cliente (400-499)
Indicam que o cliente (desenvolvedor) enviou algo errado
Ex: 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 405 Method Not Allowed
Erros de Servidor (500-599)
Indicam que houve um problema no servidor
Ex: 500 Internal Server Error, 501 Not Implemented, 502 Bad Gateway, 503 Service Unavailable, 504 Gateway Timeout
Exemplos Detalhados
Respostas Informativas
100 Continue: Servidor informa que a requisição pode continuar
101 Switching Protocols: Servidor está mudando o protocolo
Respostas de Sucesso
200 OK: Operação bem-sucedida
201 Created: Recurso criado
202 Accepted: Requisição aceita para processamento
204 No Content: Requisição bem-sucedida, sem conteúdo de retorno
Respostas de Redirecionamento
301 Moved Permanently: Recurso movido permanentemente
302 Found: Recurso encontrado em URL temporária
304 Not Modified: Recurso não modificado desde a última requisição
Erros de Cliente
400 Bad Request: Requisição mal formatada
401 Unauthorized: Não autorizado
403 Forbidden: Acesso negado
404 Not Found: Recurso não encontrado
405 Method Not Allowed: Método não permitido
Erros de Servidor
500 Internal Server Error: Erro inesperado no servidor
501 Not Implemented: Funcionalidade não implementada
502 Bad Gateway: Gateway inválido
503 Service Unavailable: Serviço indisponível
504 Gateway Timeout: Tempo limite de gateway excedido
Conclusão
Entendimento dos códigos de status HTTP é essencial para desenvolvedores front-end
Permite lidar com respostas do servidor e identificar problemas
Recomendação de consultar a documentação oficial para aprofundamento


                                        O que é uma API?
O que é uma API?
Interface de Programação de Aplicações (API)
Forma de comunicação mais simples e segura entre aplicação web e servidor
Problemas com a comunicação direta com o banco de dados
Complexidade no código da aplicação web
Exposição de risco de segurança
Baixa performance
Surgimento das APIs
Criação de uma camada intermediária (back-end) com endpoints
Melhor organização e segurança da comunicação
Tipos de APIs
REST (Representational State Transfer)
GraphQL
Funcionamento de uma API REST
Endpoints (URLs) com métodos HTTP (GET, POST, PUT, DELETE)
Parâmetros de caminho e de consumo
Headers (informações adicionais)
Exemplo prático: API como um garçom
Aplicação web (cliente) faz pedido para a API (garçom)
API (garçom) repassa o pedido para o servidor (cozinheiro)
Servidor (cozinheiro) processa o pedido e retorna a resposta para a API (garçom)
API (garçom) entrega a resposta para a aplicação web (cliente)
Próximo passo: Utilizar o Postman para testar APIs


                                        Testando APIs com Postman
Introdução
Instalação e configuração do Postman
Objetivo: testar as APIs utilizadas no projeto
API de WebText
Objetivo: obter os textos da aplicação (em português e inglês) para permitir a troca de idioma
Endpoint: https://dncreactapi.vercel.com/files/webtext
Resposta em formato JSON
Teste da API:
Chamada bem-sucedida (status 200)
Chamada com parâmetro errado (status 404)
Importância de testar as APIs antes de integrá-las ao código
API de Projetos
Objetivo: obter a lista de projetos a serem exibidos na aplicação
Endpoint: https://dncreactapi.vercel.com/files/projects
Resposta em formato JSON
Teste da API:
Chamada bem-sucedida (status 200)
API de Formulário de Contato
Objetivo: enviar mensagens do formulário de contato da aplicação
Serviço utilizado: Web Trace Forms
Configuração: cadastro e obtenção da chave de acesso
Endpoint: https://www.webtracer.com.br/api/webform/submit
Requisição POST com:
Header: Content-Type: application/json
Body: { "name": "Gabriel Silva", "msg": "Olá", "access_key": "sua_chave_de_acesso" }
Teste da API:
Chamada bem-sucedida (status 200)
Recebimento da mensagem no e-mail cadastrado
Conclusão
Importância de testar as APIs antes de integrá-las ao código
Evita problemas e economiza tempo durante o desenvolvimento


                                        Entendendo e Utilizando o Postman para Testar APIs
O que é uma API?
APIs são interfaces de programação de aplicativos que permitem a comunicação entre diferentes sistemas
APIs resolvem problemas e dores relacionados à integração de sistemas
Introdução ao Postman
O Postman é uma ferramenta muito utilizada por desenvolvedores back-end e front-end para testar APIs
O Postman fornece uma visão clara e intuitiva do que está acontecendo com as APIs
Outras ferramentas similares incluem o Insomnia e extensões do VSCode
Instalação e Configuração do Postman
Baixar e instalar o Postman no computador
Criar uma conta no Postman para ter acesso a recursos adicionais
Entender a interface do Postman, incluindo os diferentes métodos HTTP (GET, POST, PUT, DELETE)
Testando Chamadas de API com o Postman
No projeto atual, serão utilizados apenas os métodos GET e POST
Outros métodos, como PUT e DELETE, serão abordados posteriormente
O Postman será usado para testar as chamadas GET e POST do projeto
Benefícios do Uso do Postman
Compartilhamento fácil de APIs entre desenvolvedores
Manutenção de uma documentação centralizada das APIs do projeto
Alinhamento da equipe de desenvolvimento em relação às APIs disponíveis


                                        Consumindo APIs em Projetos React
Conceitos Importantes
Promises
Promessas de requisições assíncronas
Estado inicial de espera, estados finais de sucesso ou rejeição
Base da programação assíncrona em JavaScript
Hooks useState e useEffect
useState para gerenciar estados da aplicação
useEffect para controlar o ciclo de vida dos componentes
Chamada de Promises em React
Exemplo 1: Simulação de Resposta de API
Estado de loading, data e error
Tratamento de sucesso e erro da Promise
Atualização da tela de acordo com o estado da Promise
Exemplo 2: Chamada de API de Projetos
Uso de async/await para chamada assíncrona
Tratamento de erros com try/catch
Checagem de status da resposta (200 OK)
Tratamento de erros catastróficos no catch
Conclusão
Importância do tratamento adequado de erros em chamadas de API
Uso de Promises, async/await e hooks para gerenciar o ciclo de vida das chamadas
Aplicação prática dos conceitos em um projeto React


                                        Integração de API REST em um Projeto React
Configuração do Ambiente
Criar uma pasta "services" dentro da pasta "src"
Criar um arquivo "API.services.js" dentro da pasta "services"
Definir uma função "getAPIData" para lidar com requisições GET
Implementação no Projeto
Importar "getAPIData" no componente "ProjectList"
Utilizar os hooks "useState" e "useEffect" para gerenciar o estado e a chamada da API
Criar uma função "fetchData" que chama "getAPIData" e atualiza o estado de "projects"
Exibir os dados dos projetos no componente "ProjectList" utilizando o método "map"
Detalhes da Implementação
Função "getAPIData"
Recebe dois parâmetros: "endpoint" e "params"
Utiliza o método "fetch" para fazer a requisição GET
Trata erros de resposta com um "try/catch"
Retorna os dados da API após a requisição ser bem-sucedida
Componente "ProjectList"
Importa a função "getAPIData" do arquivo "API.services.js"
Utiliza os hooks "useState" e "useEffect" para gerenciar o estado e a chamada da API
Cria a função "fetchData" que chama "getAPIData" e atualiza o estado de "projects"
Renderiza os dados dos projetos utilizando o método "map"
Exibe as informações de cada projeto, como título, subtítulo e imagem de capa
Benefícios
Separação da lógica de chamada de API em um arquivo dedicado
Reutilização da função "getAPIData" em diferentes partes do projeto
Melhor controle e tratamento de erros na chamada da API
Exibição dinâmica dos dados dos projetos, evitando hardcoding
Conclusão
O vídeo demonstra como integrar uma API REST em um projeto React, utilizando boas práticas de organização do código e gerenciamento de estado. A abordagem apresentada permite uma implementação robusta e escalável, facilitando a manutenção e evolução do projeto.


